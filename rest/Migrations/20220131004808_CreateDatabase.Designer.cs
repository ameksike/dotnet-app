// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rest.src.Models.DAO;

#nullable disable

namespace rest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220131004808_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("rest.src.Models.ORM.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("geoid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("suite")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("geoid");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("rest.src.Models.ORM.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("bs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("catchPhrase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("rest.src.Models.ORM.Geopoint", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("lat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lng")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Geopoint");
                });

            modelBuilder.Entity("rest.src.Models.ORM.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("addressid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("companyid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("addressid");

                    b.HasIndex("companyid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("rest.src.Models.ORM.Address", b =>
                {
                    b.HasOne("rest.src.Models.ORM.Geopoint", "geo")
                        .WithMany()
                        .HasForeignKey("geoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("geo");
                });

            modelBuilder.Entity("rest.src.Models.ORM.User", b =>
                {
                    b.HasOne("rest.src.Models.ORM.Address", "address")
                        .WithMany("Users")
                        .HasForeignKey("addressid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rest.src.Models.ORM.Company", "company")
                        .WithMany("Users")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("company");
                });

            modelBuilder.Entity("rest.src.Models.ORM.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("rest.src.Models.ORM.Company", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
